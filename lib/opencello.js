// Generated by CoffeeScript 1.4.0
(function() {
  var Kernel, P, copy, cs2js, files, fs, inspect, isArray, isBoolean, isFunction, isNumber, isString, isUndefined, js2cs, jsp, pro, toAST;

  jsp = require("../node_modules/uglify-js/lib/parse-js");

  pro = require("../node_modules/uglify-js/lib/process");

  cs2js = require('../node_modules/coffee-script').compile;

  js2cs = require('../node_modules/js2coffee/lib/js2coffee').build;

  fs = require('fs');

  inspect = require('util').inspect;

  copy = function(a) {
    return JSON.parse(JSON.stringify(a));
  };

  P = function(p) {
    if (p == null) {
      p = 0.5;
    }
    return +(Math.random() < p);
  };

  isFunction = function(obj) {
    return !!(obj && obj.constructor && obj.call && obj.apply);
  };

  isUndefined = function(obj) {
    return typeof obj === 'undefined';
  };

  isArray = function(obj) {
    return Array.isArray(obj);
  };

  isString = function(obj) {
    return !!(obj === '' || (obj && obj.charCodeAt && obj.substr));
  };

  isNumber = function(obj) {
    return (obj === +obj) || toString.call(obj) === '[object Number]';
  };

  isBoolean = function(obj) {
    return obj === true || obj === false;
  };

  isString = function(obj) {
    return !!(obj === '' || (obj && obj.charCodeAt && obj.substr));
  };

  exports.toAST = toAST = function(f) {
    return jsp.parse(f.toString());
  };

  Kernel = (function() {

    function Kernel(symbol) {
      this.symbol = symbol;
    }

    Kernel.prototype.setInterface = function(vars) {
      if (vars == null) {
        vars = {};
      }
    };

    Kernel.prototype.addStatement = function() {};

    return Kernel;

  })();

  files = {};

  exports.kernel = function() {
    var ast, filePath, getKernels, kernels, src;
    filePath = process.argv[1];
    if (filePath.slice(-3) !== ".js") {
      filePath += ".js";
    }
    if (filePath in files) {
      console.log("file " + filePath + " already processed, skipping");
      return function() {};
    }
    console.log("processing file " + filePath);
    src = fs.readFileSync(filePath).toString();
    console.log("src: " + src);
    ast = toAST(src);
    console.log("AST: " + (inspect(ast, false, 20, true)));
    kernels = {};
    return (getKernels = function(node) {
      var name;
      if (isArray(node)) {
        if (node.slice(0, 23) === "call,name,kernel,assign,true,") {
          name = node[2][0][3][1];
          console.log("found an OpenCL kernel called " + name);
          return kernels[name] = new Kernel(name);
        }
      }
    })(ast);
  };

  exports.Kernel = Kernel;

  exports.integer = function() {};

  exports.float = function() {};

}).call(this);
