// Generated by CoffeeScript 1.4.0
(function() {
  var C, P, copy, cs2js, float, fs, include, inspect, int, isArray, isBoolean, isFunction, isNumber, isString, isUndefined, js2cs, jsp, pro, src, term, toAST, varAssign;

  jsp = require("../node_modules/uglify-js/lib/parse-js");

  pro = require("../node_modules/uglify-js/lib/process");

  cs2js = require('../node_modules/coffee-script').compile;

  js2cs = require('../node_modules/js2coffee/lib/js2coffee').build;

  fs = require('fs');

  inspect = require('util').inspect;

  copy = function(a) {
    return JSON.parse(JSON.stringify(a));
  };

  P = function(p) {
    if (p == null) {
      p = 0.5;
    }
    return +(Math.random() < p);
  };

  isFunction = function(obj) {
    return !!(obj && obj.constructor && obj.call && obj.apply);
  };

  isUndefined = function(obj) {
    return typeof obj === 'undefined';
  };

  isArray = function(obj) {
    return Array.isArray(obj);
  };

  isString = function(obj) {
    return !!(obj === '' || (obj && obj.charCodeAt && obj.substr));
  };

  isNumber = function(obj) {
    return (obj === +obj) || toString.call(obj) === '[object Number]';
  };

  isBoolean = function(obj) {
    return obj === true || obj === false;
  };

  isString = function(obj) {
    return !!(obj === '' || (obj && obj.charCodeAt && obj.substr));
  };

  exports.toAST = toAST = function(f) {
    return jsp.parse(f.toString());
  };

  varAssign = function(n) {
    var symbol, type, value;
    console.log("varAssign " + (inspect(n, false, 20, true)));
    type = n[1][1][1];
    symbol = n[1][2][0][2][1];
    value = n[1][2][0][3][1];
    return "" + type + " " + symbol + " = " + value + ";\n";
  };

  term = function(n) {};

  exports.C = C = function(func) {
    var ast, headers, include, includes, output, parse, scope, scopes, src, _i, _len;
    src = func.toString();
    src = "var ROOT = " + src + ";";
    console.log("src: " + src);
    ast = toAST(src);
    console.log("AST: " + (inspect(ast, false, 20, true)));
    includes = [];
    scopes = [{}];
    scope = 0;
    output = "";
    (parse = function(nodes) {
      var n, node, _i, _len, _results;
      n = "" + nodes;
      if ('stat,call,name,include,string,' === n.slice(0, 30)) {
        includes.push(n.slice(30));
      } else if ("stat,call,name,int,assign,true,name," === n.slice(0, 36)) {
        output += varAssign(nodes);
      } else if ("stat,call,name,float,assign,true,name," === n.slice(0, 36)) {
        output += varAssign(nodes);
      } else if ("stat,call,name,ufloat,assign,true,name," === n.slice(0, 36)) {
        output += varAssign(nodes);
      } else if ("stat,call,name,uint,assign,true,name," === n.slice(0, 36)) {
        output += varAssign(nodes);
      } else if ("stat,call,name,double,assign,true,name," === n.slice(0, 36)) {
        output += varAssign(nodes);
      } else if ("stat,call,name,char,assign,true,name," === n.slice(0, 36)) {
        output += varAssign(nodes);
      }
      if (isArray(nodes)) {
        _results = [];
        for (_i = 0, _len = nodes.length; _i < _len; _i++) {
          node = nodes[_i];
          _results.push(parse(node));
        }
        return _results;
      }
    })(ast);
    headers = "";
    for (_i = 0, _len = includes.length; _i < _len; _i++) {
      include = includes[_i];
      headers += "#include <" + include + ">\n";
    }
    return output = headers + output;
  };

  ['stat', ['call', ['name', 'int'], [['assign', true, ['name', 'x'], ['num', 40]]]]];

  ['stat', ['call', ['name', 'include'], [['string', 'stdio.h']]]];

  exports.int = int = function() {};

  exports.float = float = function() {};

  exports.include = include = function(file) {};

  src = C(function() {
    var main, x;
    include('stdio.h');
    include('stdlib.h');
    int(x = 40);
    return main = function() {
      var y;
      int(y = 43 + x);
      return console.log(y);
    };
  });

  console.log("source:\n " + src);

}).call(this);
