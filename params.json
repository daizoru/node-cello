{"google":"","note":"Don't delete this file! It's used internally to help with page regeneration.","name":"Node-cello","body":"node-cello\r\n==========\r\n\r\n*a simple DSL to generate simple C programs*\r\n\r\nAlternative title:\r\n \r\n*A magical DSL to generate C code from CoffeeScript*\r\n\r\n## Introduction\r\n\r\nnode-cello is a work-in-progress DSL and template engine for generating C programs.\r\n\r\n## Warning\r\n\r\nThis is an experimental project, and should be used with care.\r\n\r\nFor the moment only basic C code can be generated using this library.\r\n\r\nThe code is a bit messy, and architecture/syntax is not fixed yet.\r\n\r\nHowever it is already on NPM repository because:\r\n\r\n1. it basically works\r\n2. it's a dependency of another project\r\n\r\nThank you for your understanding!\r\n\r\n## Demo\r\n\r\n```coffeescript\r\n{ C } = require 'cello'\r\n\r\nsrc = C ->\r\n  include 'stdio.h'\r\n  include 'stdlib.h'\r\n  int x = 40\r\n  main = ->\r\n   int y = 43 + x\r\n   printf \"hello\"\r\n\r\nconsole.log src\r\n```\r\n\r\nOutputs: \r\n\r\n```C\r\n#include <stdio.h>\r\n#include <stdlib.h>\r\nint x = 40;\r\nvoid main() {\r\n\tint y = (43 + x);\r\n\tprintf(\"hello\");\r\n}\r\n```\r\n\r\nMagic? yes. \r\n\r\n## Documentation\r\n\r\n### Options\r\n\r\nYou can pass parameters to cello.\r\nFor the moment only two are supported:\r\n\r\n* indent: the indentation string to use (eg. \"   \" or \"\\n\")\r\n* debug: some debug messages - for development only\r\n\r\nExample:\r\n\r\n```CoffeeScript\r\nsrc = C(indent: \"  \", debug: yes) -> \r\n  main = ->\r\n```\r\n\r\n### Compiling\r\n\r\nExperimental support of gcc is implemented:\r\n\r\n```CoffeeScript\r\n{C, run} = require 'cello'\r\nsrc = C -> main = -> printf \"hello world\"\r\nrun src, (output) -> console.log \"output: #{output}\"\r\n```\r\n\r\n## TODO\r\n\r\n* Find a way to support typed parameters (eg. type inference?)\r\n* Implement more C language features\r\n* Implement MUCH MORE C language features\r\n* Implement ALL C language features (well, ideally)\r\n* unit tests\r\n\r\n### More TODO: built-in compiler support? \r\n\r\n* add support for an 'inline' mode like in Perl\r\n* autoconfing\r\n* on-the-fly compilation\r\n* execute the binary\r\n* handle the STDIN / STDOUT wrapping\r\n\r\n## Changelog\r\n\r\n#### 0.0.3\r\n\r\n * basic support for gcc compilation and execution\r\n\r\n#### 0.0.2\r\n\r\n * added some options\r\n\r\n#### 0.0.1\r\n\r\n * Removed debug console.logs\r\n * forgot to add uglify-js as dependency in the package.json!\r\n * removed useless dependencies in code\r\n\r\n#### 0.0.0\r\n\r\n * Basic features are supported","tagline":"Simple DSL to generate simple C programs"}