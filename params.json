{"name":"node-cello","tagline":"Simple DSL to generate simple C programs","body":"node-cello\r\n==========\r\n\r\n*a simple DSL to generate simple C programs*\r\n\r\nAlternative title:\r\n \r\n*A magical DSL to generate C code from CoffeeScript*\r\n\r\n## Introduction\r\n\r\nnode-cello is a work-in-progress DSL and template engine for generating C programs.\r\n\r\n## Warning\r\n\r\nThis is an experimental project, and should be used with care.\r\n\r\nFor the moment only basic C code can be generated using this library.\r\n\r\nThe code is a bit messy, and architecture/syntax is not fixed yet.\r\n\r\nHowever it is already on NPM repository because:\r\n\r\n1. it basically works\r\n2. it's a dependency of another project\r\n\r\nThank you for your understanding!\r\n\r\n## Documentation\r\n\r\n### Options\r\n\r\nYou can pass parameters to cello.\r\nFor the moment only a few are supported:\r\n\r\n* indent: the indentation string to use (eg. \"   \" or \"\\t\")\r\n* debug: some debug messages - for development only\r\n* evaluate: a func which return a list of JS references to interpret BEFORE code generation\r\n* ignore: a func which return a list of JS references to ignore (won't be translated to C)\r\n\r\nExample:\r\n\r\n```CoffeeScript\r\nsrc = C(indent: \"  \", debug: yes) -> \r\n  main = ->\r\n```\r\n\r\n### Compiling\r\n\r\nExperimental support of gcc is implemented:\r\n\r\n```CoffeeScript\r\n{C, run} = require 'cello'\r\nsrc = C -> main = -> printf \"hello world\"\r\nrun src, (output) -> console.log \"output: #{output}\"\r\n```\r\n\r\n\r\n### Communicating\r\n\r\nYou can execute a program, and read/write from it, as it was a bi-directional stream:\r\n\r\n```CoffeeScript\r\n{C, Program} = require 'cello'\r\nsrc = C -> main = -> \r\n  # put code that reads from STDIN and write to\r\n  # STDOUT here (see examples/pipeline.coffee)\r\nprogram = new Program src\r\nprogram.run process.argv[1..], ->\r\n   \r\n  # bind to output events\r\n  program.on 'stdout', (buff)           -> console.log buff.toString()\r\n  program.on 'stderr', (buff)           -> console.log buff.toString()\r\n  program.on 'close',  ({code, signal}) -> console.log code   \r\n\r\n  # do stuff\r\n  program.write \"hello world\"\r\n  program.close()\r\n```\r\n\r\n## Demos\r\n\r\n### Demo 1\r\n\r\n```coffeescript\r\n{ C, run } = require 'cello'\r\n\r\nsrc = C ->\r\n  include 'stdio.h'\r\n  int x = 40\r\n  main = ->\r\n   int y = 43 + x\r\n   printf \"hello\"\r\n\r\n# compile & run\r\nrun src, console.log\r\n```\r\n\r\nWill generate this code: \r\n\r\n```C\r\n#include <stdio.h>\r\nint x = 40;\r\nint main() {\r\n\tint y = (43 + x);\r\n\tprintf(\"hello\");\r\n\treturn 0;\r\n}\r\n```\r\n\r\nThen it will run and print 'hello'. Magic? yes. \r\n\r\n### Demo 2\r\n\r\n```CoffeeScript\r\n{C, run} = require 'cello'\r\n\r\noptions =\r\n  indent: \"  \"\r\n  evaluate: -> [ Math.random, Math.round ]\r\n  ignore: -> []\r\n  debug: no\r\n\r\nsrc = C(options) -> \r\n  include 'stdio.h'\r\n  include 'stdlib.h'\r\n\r\n  int x = 40\r\n\r\n  main = ->\r\n\r\n    printf \"hello, \"\r\n    int y = 43 + x / 10\r\n    printf \"result is %i\", y\r\n\r\n    int a = [ 0, 0, 0, 1, 0 ]\r\n    int b[5] = [ 0 ]\r\n\r\n    float seed = Math.round Math.random() * 1000\r\n \r\n    #int compute = (a=int, b=int) -> a + b\r\n\r\n    char p1 = 127\r\n    char $p2 = malloc sizeof char\r\n\r\n    int i = 0\r\n    while i < 10000\r\n      ++i\r\n    while i > 10000\r\n      i--   \r\n\r\n    0 \r\n\r\n    \r\n\r\nconsole.log \"#{src}\"\r\n\r\nrun src, (err, output) ->\r\n  if err\r\n    throw new Error err\r\n  else\r\n    console.log \"#{output}\"\r\n```\r\n\r\nwill generate:\r\n\r\n```C\r\n#include <stdio.h>\r\n#include <stdlib.h>\r\nint x = 40;\r\nint main() {\r\n  printf(\"hello, \");\r\n  int y = 43 + x / 10;\r\n  printf(\"result is %i\",y);\r\n  int a = {0, 0, 0, 1, 0};\r\n  int b[5] = {0};\r\n  float seed = 926;\r\n  char p1 = 127;\r\n  char *p2 = malloc(sizeof(char));\r\n  int i = 0;\r\n  while (i < 10000) {\r\n    ++i;\r\n  }\r\n  while (i > 10000) {\r\n    i--;\r\n  }\r\n  return 0;\r\n}\r\n\r\n```\r\n\r\nwith output:\r\n\r\n```\r\nhello\r\n```\r\n\r\n### Demo 3\r\n\r\nThis demo shows how to communicate with the sub C program:\r\n\r\n```CoffeeScript\r\n{C, Program} = require 'cello'\r\n\r\nprogram = new Program C() ->\r\n  include 'stdio.h'\r\n  int main = ->\r\n    setbuf stdout, NULL\r\n    char c = fgetc stdin\r\n    while c isnt EOF\r\n      printf \"%c\", c\r\n      c = fgetc stdin\r\n    0\r\n\r\n# call the program, here with an empty argument list\r\nprogram.run [], ->\r\n  console.log \"demo.program started\"\r\n  program.write \"hello\"\r\n  program.write \"world\"\r\n  program.close ({code, signal}) -> console.log \"closed: #{code}\"\r\n\r\nprogram.on 'stdout',  (buff) ->  console.log \"output: \" + buff.toString()\r\nprogram.on 'stderr',  (buff) ->  console.log \"demo.stderr: \" + buff.toString()\r\n```\r\n\r\n\r\n## WISHLIST FOR SANTA\r\n\r\n * support for inline C statements, as lone strings (eg. \"\"\"(void *) i;\"\"\")\r\n * support for Class: http://stackoverflow.com/a/840703\r\n * support for new (either malloc, or just ignore it?, but at least it will feel a bit more natural)\r\n * support for function pointers allocation\r\n * support for &? (altough it's mostly used for func pointers, and it is implicit)\r\n * find a more elegant solution than using 'Void' as alias of 'void'?\r\n * find an elegant solution to support const (which is forbidden in Coffee/JavaScript)\r\n * support typedef\r\n * support struct\r\n * add more doc (eg. the if / while example)\r\n * support for loops (by not translating directly but generating boilerplate)\r\n * support pointer casting\r\n * Type inference (eg. that \"i = 0\" will convert to \"int i = 0\")\r\n * Implement ALL C language features\r\n * more unit tests\r\n * more CoffeeScript magic (eg. doing more implicit stuff such as: x = y for x in [0...2])\r\n\r\n## Changelog\r\n\r\n#### 0.1.1\r\n\r\n * just fixed typo and the doc, to have a better page on NPM's website\r\n \r\n#### 0.1.0\r\n\r\n * added a new Program class\r\n * support for bi-directional communication using unix pipes\r\n\r\n\r\n#### 0.0.9 - unreleased\r\n#### 0.0.8 - unreleased\r\n\r\n * Support for include 'test.h' and include '<stdlib.h>'\r\n \r\n#### 0.0.7\r\n\r\n * Added support for break and continue\r\n * added support for functions (eg. main) args\r\n * added support for command line args (when calling run())\r\n\r\n#### 0.0.6\r\n\r\n * fixed a bug with missing parameters in the options\r\n * Added support for \"if\" expressiion\r\n * Simplified \"while\" expression\r\n * Support for blocks \"{}\"\r\n * Added basic unit tests\r\n\r\n#### 0.0.5\r\n\r\n * Rewrote nearly everything from scratch\r\n * should be f***ing more robust now\r\n * moved debug scripts to /examples\r\n * experimenting with OpenCL kernel generation (yeah for node-evolve!)\r\n\r\n#### 0.0.4\r\n\r\n Added basic support for:\r\n\r\n * array declaration and initialization\r\n * pointers (using $ instead of *)\r\n * while loops\r\n\r\n Also fixed a few bugs around\r\n\r\n#### 0.0.3\r\n\r\n * basic support for gcc compilation and execution\r\n\r\n#### 0.0.2\r\n\r\n * added some options\r\n\r\n#### 0.0.1\r\n\r\n * Removed debug console.logs\r\n * forgot to add uglify-js as dependency in the package.json!\r\n * removed useless dependencies in code\r\n\r\n#### 0.0.0\r\n\r\n * Basic features are supported","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}