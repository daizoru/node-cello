{"note":"Don't delete this file! It's used internally to help with page regeneration.","name":"Node-cello","google":"","tagline":"Simple DSL to generate simple C programs","body":"node-cello\r\n==========\r\n\r\n*a simple DSL to generate simple C programs*\r\n\r\nAlternative title:\r\n \r\n*A magical DSL to generate C code from CoffeeScript*\r\n\r\n## Introduction\r\n\r\nnode-cello is a work-in-progress DSL and template engine for generating C programs.\r\n\r\n## Warning\r\n\r\nThis is an experimental project, and should be used with care.\r\n\r\nFor the moment only basic C code can be generated using this library.\r\n\r\nThe code is a bit messy, and architecture/syntax is not fixed yet.\r\n\r\nHowever it is already on NPM repository because:\r\n\r\n1. it basically works\r\n2. it's a dependency of another project\r\n\r\nThank you for your understanding!\r\n\r\n## Demo 1\r\n\r\n```coffeescript\r\n{ C, run } = require 'cello'\r\n\r\nsrc = C ->\r\n  include 'stdio.h'\r\n  int x = 40\r\n  main = ->\r\n   int y = 43 + x\r\n   printf \"hello\"\r\n\r\n# compile & run\r\nrun src, console.log\r\n```\r\n\r\nWill generate this code: \r\n\r\n```C\r\n#include <stdio.h>\r\nint x = 40;\r\nint main() {\r\n\tint y = (43 + x);\r\n\tprintf(\"hello\");\r\n\treturn 0;\r\n}\r\n```\r\n\r\nThen it will run and print 'hello'. Magic? yes. \r\n\r\n## Demo 2\r\n\r\n```CoffeeScript\r\n{C, run} = require 'cello'\r\n\r\noptions =\r\n  indent: \"  \"\r\n  evaluate: -> [ Math.random, Math.round ]\r\n  ignore: -> []\r\n  debug: no\r\n\r\nsrc = C(options) -> \r\n  include 'stdio.h'\r\n  include 'stdlib.h'\r\n\r\n  int x = 40\r\n\r\n  main = ->\r\n\r\n    printf \"hello, \"\r\n    int y = 43 + x / 10\r\n    printf \"result is %i\", y\r\n\r\n    int a = [ 0, 0, 0, 1, 0 ]\r\n    int b[5] = [ 0 ]\r\n\r\n    float seed = Math.round Math.random() * 1000\r\n \r\n    #int compute = (a=int, b=int) -> a + b\r\n\r\n    char p1 = 127\r\n    char $p2 = malloc sizeof char\r\n\r\n    int i = 0\r\n    while i < 10000\r\n      ++i\r\n    while i > 10000\r\n      i--   \r\n\r\n    0 \r\n\r\n    \r\n\r\nconsole.log \"#{src}\"\r\n\r\nrun src, (err, output) ->\r\n  if err\r\n    throw new Error err\r\n  else\r\n    console.log \"#{output}\"\r\n```\r\n\r\nwill generate:\r\n\r\n```C\r\n#include <stdio.h>\r\n#include <stdlib.h>\r\nint x = 40;\r\nint main() {\r\n  printf(\"hello, \");\r\n  int y = 43 + x / 10;\r\n  printf(\"result is %i\",y);\r\n  int a = {0, 0, 0, 1, 0};\r\n  int b[5] = {0};\r\n  float seed = 926;\r\n  char p1 = 127;\r\n  char *p2 = malloc(sizeof(char));\r\n  int i = 0;\r\n  while (i < 10000) {\r\n    ++i;\r\n  }\r\n  while (i > 10000) {\r\n    i--;\r\n  }\r\n  return 0;\r\n}\r\n\r\n```\r\n\r\nwith output:\r\n\r\n```\r\nhello\r\n```\r\n\r\n## Documentation\r\n\r\n### Options\r\n\r\nYou can pass parameters to cello.\r\nFor the moment only two are supported:\r\n\r\n* indent: the indentation string to use (eg. \"   \" or \"\\n\")\r\n* debug: some debug messages - for development only\r\n\r\nExample:\r\n\r\n```CoffeeScript\r\nsrc = C(indent: \"  \", debug: yes) -> \r\n  main = ->\r\n```\r\n\r\n### Compiling\r\n\r\nExperimental support of gcc is implemented:\r\n\r\n```CoffeeScript\r\n{C, run} = require 'cello'\r\nsrc = C -> main = -> printf \"hello world\"\r\nrun src, (output) -> console.log \"output: #{output}\"\r\n```\r\n\r\n## TODO\r\n\r\n*\r\n* Find a way to support typed parameters (eg. type inference?)\r\n* Implement more C language features, like true function declaration (with types)\r\n* Implement MUCH MORE C language features\r\n* Implement ALL C language features (well, ideally)\r\n* unit tests\r\n\r\n### More TODO: built-in compiler support? \r\n\r\n* add support for an 'inline' mode like in Perl\r\n* autoconfing\r\n* on-the-fly compilation\r\n* execute the binary\r\n* handle the STDIN / STDOUT wrapping\r\n\r\n## Changelog\r\n\r\n#### 0.0.4\r\n\r\n Added basic support for:\r\n\r\n * array declaration and initialization\r\n * pointers (using $ instead of *)\r\n * while loops\r\n\r\n Also fixed a few bugs around\r\n\r\n#### 0.0.3\r\n\r\n * basic support for gcc compilation and execution\r\n\r\n#### 0.0.2\r\n\r\n * added some options\r\n\r\n#### 0.0.1\r\n\r\n * Removed debug console.logs\r\n * forgot to add uglify-js as dependency in the package.json!\r\n * removed useless dependencies in code\r\n\r\n#### 0.0.0\r\n\r\n * Basic features are supported"}